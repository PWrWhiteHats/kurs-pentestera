import random
import base64
import socket
import threading
import time
import sys

BIND_ADDR = "127.0.0.1" 
BIND_PORT = int(sys.argv[1])
operations = ["+", "-", "*", "//"]

def challenge(client_socket):
    for _ in range(3):
        t1 = time.perf_counter()
        nums = [random.randint(10000, 2000000) for _ in range(2)]
        op = operations[random.randint(0, 3)]
        correct_solution = eval(f"{nums[0]} {op} {nums[1]}")
        nums = list(map(lambda x: base64.b64encode(hex(x).encode()).decode(), nums))
        client_socket.send(f"{op}\n{nums[0]} {nums[1]}\n\n".encode())
        user_solution = client_socket.recv(1024)
        t2 = time.perf_counter()
        try: 
            if int(user_solution.decode().strip()) != correct_solution: 
                msg = "wrong answer!"
                break
            elif t2 - t1 > 3: 
                msg = "too slow!"
                break
        except:
            msg = "error"
            break
    else:
        msg = "WH{sockets}"

    client_socket.send(msg.encode())
    client_socket.close()




server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((BIND_ADDR, BIND_PORT))
server_socket.listen(5)
while True:
    try:
        client_socket, remote_addr = server_socket.accept()
        print("connected")
        t = threading.Thread(target=challenge, args=(client_socket,))
        t.start()  
    except KeyboardInterrupt: 
        break

    
server_socket.close()
#!/usr/bin/env python3
#
# Odnajdowanie aktywnych hostów w sieci
# za pomocą ARP
#
from scapy.all import srp, ARP, Ether
import argparse, netaddr, sys, os


BROADCAST = 'ff:ff:ff:ff:ff:ff'


if os.name == 'posix' and os.geteuid() != 0:
    print("Run this as root")
    quit()

# przetwarzanie argumentów wiersza poleceń
parser = argparse.ArgumentParser(description="ARP host scanner")
parser.epilog = f"example: sudo {sys.argv[0]} --subnet=192.168.0.1/24"

parser.add_argument("--subnet", action="store",
                    required=True, help="IPv4 subnet to scan")
parser.add_argument("--verbose", "-v", action='store_true', help="verbosing",
                    default=False)
parser.add_argument("--iface", "-i", action='store', required=True,
                    help="network interface")
parser.add_argument("--timeout", "-t", action="store", help="timeout in seconds",
                    default=2)

args = parser.parse_args()

subnet = args.subnet
verbose, iface = args.verbose, args.iface
timeout = args.timeout

# Walidacja danych
try:
    netaddr.IPNetwork(subnet)
    timeout = int(timeout)
except (netaddr.core.AddrFormatError, ValueError) as err:
    print(err)
    quit()

# Rozesłanie zapytań ARP
answers, _ = srp(Ether(dst=BROADCAST)/ARP(pdst=subnet, hwdst=BROADCAST),
    verbose=verbose, timeout=timeout, iface=iface)

# Wypisanie odpowiedzi
print('\n'.join(map(lambda a: a.answer.sprintf("%ARP.psrc% -> %Ether.src%"), answers)))
